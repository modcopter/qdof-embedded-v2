
qdof-embedded-v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080020c  0080020c  000003d0  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006b2  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f1  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000046f  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  00001934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005da  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  000023d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	e5 c0       	rjmp	.+458    	; 0x25c <__vector_36>
  92:	00 00       	nop
  94:	15 c1       	rjmp	.+554    	; 0x2c0 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e3       	ldi	r30, 0x30	; 48
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 39       	cpi	r26, 0x96	; 150
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	fe d0       	rcall	.+508    	; 0x31c <main>
 120:	05 c1       	rjmp	.+522    	; 0x32c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
 13c:	80 91 c0 00 	lds	r24, 0x00C0
 140:	20 91 c6 00 	lds	r18, 0x00C6
 144:	88 71       	andi	r24, 0x18	; 24
 146:	e0 91 53 02 	lds	r30, 0x0253
 14a:	ef 5f       	subi	r30, 0xFF	; 255
 14c:	ef 71       	andi	r30, 0x1F	; 31
 14e:	90 91 52 02 	lds	r25, 0x0252
 152:	e9 17       	cp	r30, r25
 154:	39 f0       	breq	.+14     	; 0x164 <__vector_25+0x40>
 156:	e0 93 53 02 	sts	0x0253, r30
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ea 5a       	subi	r30, 0xAA	; 170
 15e:	fd 4f       	sbci	r31, 0xFD	; 253
 160:	20 83       	st	Z, r18
 162:	01 c0       	rjmp	.+2      	; 0x166 <__vector_25+0x42>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 91 51 02 	lds	r25, 0x0251
 16a:	89 2b       	or	r24, r25
 16c:	80 93 51 02 	sts	0x0251, r24
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_26>:
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
 19e:	90 91 55 02 	lds	r25, 0x0255
 1a2:	80 91 54 02 	lds	r24, 0x0254
 1a6:	98 17       	cp	r25, r24
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <__vector_26+0x3c>
 1aa:	e0 91 54 02 	lds	r30, 0x0254
 1ae:	ef 5f       	subi	r30, 0xFF	; 255
 1b0:	ef 71       	andi	r30, 0x1F	; 31
 1b2:	e0 93 54 02 	sts	0x0254, r30
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ea 58       	subi	r30, 0x8A	; 138
 1ba:	fd 4f       	sbci	r31, 0xFD	; 253
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 c6 00 	sts	0x00C6, r24
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <__vector_26+0x46>
 1c4:	e1 ec       	ldi	r30, 0xC1	; 193
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 7d       	andi	r24, 0xDF	; 223
 1cc:	80 83       	st	Z, r24
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0b be       	out	0x3b, r0	; 59
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <_Z9uart_initj>:
 1e4:	10 92 55 02 	sts	0x0255, r1
 1e8:	10 92 54 02 	sts	0x0254, r1
 1ec:	10 92 53 02 	sts	0x0253, r1
 1f0:	10 92 52 02 	sts	0x0252, r1
 1f4:	99 23       	and	r25, r25
 1f6:	24 f4       	brge	.+8      	; 0x200 <_Z9uart_initj+0x1c>
 1f8:	22 e0       	ldi	r18, 0x02	; 2
 1fa:	20 93 c0 00 	sts	0x00C0, r18
 1fe:	9f 77       	andi	r25, 0x7F	; 127
 200:	90 93 c5 00 	sts	0x00C5, r25
 204:	80 93 c4 00 	sts	0x00C4, r24
 208:	88 e9       	ldi	r24, 0x98	; 152
 20a:	80 93 c1 00 	sts	0x00C1, r24
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	80 93 c2 00 	sts	0x00C2, r24
 214:	08 95       	ret

00000216 <_Z9uart_putch>:
 216:	20 91 55 02 	lds	r18, 0x0255
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	2f 71       	andi	r18, 0x1F	; 31
 21e:	90 91 54 02 	lds	r25, 0x0254
 222:	29 17       	cp	r18, r25
 224:	e1 f3       	breq	.-8      	; 0x21e <_Z9uart_putch+0x8>
 226:	e2 2f       	mov	r30, r18
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ea 58       	subi	r30, 0x8A	; 138
 22c:	fd 4f       	sbci	r31, 0xFD	; 253
 22e:	80 83       	st	Z, r24
 230:	20 93 55 02 	sts	0x0255, r18
 234:	e1 ec       	ldi	r30, 0xC1	; 193
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	80 83       	st	Z, r24
 23e:	08 95       	ret

00000240 <_Z9uart_putsPKc>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	88 81       	ld	r24, Y
 248:	88 23       	and	r24, r24
 24a:	29 f0       	breq	.+10     	; 0x256 <_Z9uart_putsPKc+0x16>
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	e3 df       	rcall	.-58     	; 0x216 <_Z9uart_putch>
 250:	89 91       	ld	r24, Y+
 252:	81 11       	cpse	r24, r1
 254:	fc cf       	rjmp	.-8      	; 0x24e <_Z9uart_putsPKc+0xe>
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	0b b6       	in	r0, 0x3b	; 59
 268:	0f 92       	push	r0
 26a:	2f 93       	push	r18
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 274:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 278:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
 27c:	88 71       	andi	r24, 0x18	; 24
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 27e:	e0 91 0e 02 	lds	r30, 0x020E
 282:	ef 5f       	subi	r30, 0xFF	; 255
 284:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 286:	90 91 0d 02 	lds	r25, 0x020D
 28a:	e9 17       	cp	r30, r25
 28c:	39 f0       	breq	.+14     	; 0x29c <__vector_36+0x40>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 28e:	e0 93 0e 02 	sts	0x020E, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ef 5e       	subi	r30, 0xEF	; 239
 296:	fd 4f       	sbci	r31, 0xFD	; 253
 298:	20 83       	st	Z, r18
 29a:	01 c0       	rjmp	.+2      	; 0x29e <__vector_36+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 29c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 29e:	90 91 0c 02 	lds	r25, 0x020C
 2a2:	89 2b       	or	r24, r25
 2a4:	80 93 0c 02 	sts	0x020C, r24
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0b be       	out	0x3b, r0	; 59
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	0b b6       	in	r0, 0x3b	; 59
 2cc:	0f 92       	push	r0
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 2d6:	90 91 10 02 	lds	r25, 0x0210
 2da:	80 91 0f 02 	lds	r24, 0x020F
 2de:	98 17       	cp	r25, r24
 2e0:	69 f0       	breq	.+26     	; 0x2fc <__vector_37+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 2e2:	e0 91 0f 02 	lds	r30, 0x020F
 2e6:	ef 5f       	subi	r30, 0xFF	; 255
 2e8:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 2ea:	e0 93 0f 02 	sts	0x020F, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	ef 5c       	subi	r30, 0xCF	; 207
 2f2:	fd 4f       	sbci	r31, 0xFD	; 253
 2f4:	80 81       	ld	r24, Z
 2f6:	80 93 ce 00 	sts	0x00CE, r24
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <__vector_37+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 2fc:	e9 ec       	ldi	r30, 0xC9	; 201
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	8f 7d       	andi	r24, 0xDF	; 223
 304:	80 83       	st	Z, r24
    }
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	0f 90       	pop	r0
 310:	0b be       	out	0x3b, r0	; 59
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <main>:
#include <stdlib.h>
#include "uart.h"

int main(void)
{
	uart_init(UART_BAUD_SELECT(19200, F_CPU));
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	61 df       	rcall	.-318    	; 0x1e4 <_Z9uart_initj>
	sei();
 322:	78 94       	sei
	
	uart_puts("Hallo Welt!");
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	8b df       	rcall	.-234    	; 0x240 <_Z9uart_putsPKc>
 32a:	ff cf       	rjmp	.-2      	; 0x32a <main+0xe>

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
