
qdof-embedded-v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  00800200  00800200  000003e8  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000941  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000397  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000063c  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001fc  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c8  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000650  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	75 c1       	rjmp	.+746    	; 0x33c <__vector_20>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	52 c0       	rjmp	.+164    	; 0x10a <__vector_25>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ca c0       	rjmp	.+404    	; 0x226 <__vector_36>
  92:	00 00       	nop
  94:	fa c0       	rjmp	.+500    	; 0x28a <__vector_37>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ae 39       	cpi	r26, 0x9E	; 158
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	f4 d0       	rcall	.+488    	; 0x2ee <main>
 106:	24 c1       	rjmp	.+584    	; 0x350 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_25>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	2f 93       	push	r18
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
 122:	80 91 c0 00 	lds	r24, 0x00C0
 126:	20 91 c6 00 	lds	r18, 0x00C6
 12a:	88 71       	andi	r24, 0x18	; 24
 12c:	e0 91 47 02 	lds	r30, 0x0247
 130:	ef 5f       	subi	r30, 0xFF	; 255
 132:	ef 71       	andi	r30, 0x1F	; 31
 134:	90 91 46 02 	lds	r25, 0x0246
 138:	e9 17       	cp	r30, r25
 13a:	39 f0       	breq	.+14     	; 0x14a <__vector_25+0x40>
 13c:	e0 93 47 02 	sts	0x0247, r30
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e6 5b       	subi	r30, 0xB6	; 182
 144:	fd 4f       	sbci	r31, 0xFD	; 253
 146:	20 83       	st	Z, r18
 148:	01 c0       	rjmp	.+2      	; 0x14c <__vector_25+0x42>
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 91 45 02 	lds	r25, 0x0245
 150:	89 2b       	or	r24, r25
 152:	80 93 45 02 	sts	0x0245, r24
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0b be       	out	0x3b, r0	; 59
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_26>:
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	0b b6       	in	r0, 0x3b	; 59
 17a:	0f 92       	push	r0
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
 184:	90 91 49 02 	lds	r25, 0x0249
 188:	80 91 48 02 	lds	r24, 0x0248
 18c:	98 17       	cp	r25, r24
 18e:	69 f0       	breq	.+26     	; 0x1aa <__vector_26+0x3c>
 190:	e0 91 48 02 	lds	r30, 0x0248
 194:	ef 5f       	subi	r30, 0xFF	; 255
 196:	ef 71       	andi	r30, 0x1F	; 31
 198:	e0 93 48 02 	sts	0x0248, r30
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	e6 59       	subi	r30, 0x96	; 150
 1a0:	fd 4f       	sbci	r31, 0xFD	; 253
 1a2:	80 81       	ld	r24, Z
 1a4:	80 93 c6 00 	sts	0x00C6, r24
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_26+0x46>
 1aa:	e1 ec       	ldi	r30, 0xC1	; 193
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 7d       	andi	r24, 0xDF	; 223
 1b2:	80 83       	st	Z, r24
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0b be       	out	0x3b, r0	; 59
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_Z9uart_initj>:
 1ca:	10 92 49 02 	sts	0x0249, r1
 1ce:	10 92 48 02 	sts	0x0248, r1
 1d2:	10 92 47 02 	sts	0x0247, r1
 1d6:	10 92 46 02 	sts	0x0246, r1
 1da:	99 23       	and	r25, r25
 1dc:	24 f4       	brge	.+8      	; 0x1e6 <_Z9uart_initj+0x1c>
 1de:	22 e0       	ldi	r18, 0x02	; 2
 1e0:	20 93 c0 00 	sts	0x00C0, r18
 1e4:	9f 77       	andi	r25, 0x7F	; 127
 1e6:	90 93 c5 00 	sts	0x00C5, r25
 1ea:	80 93 c4 00 	sts	0x00C4, r24
 1ee:	88 e9       	ldi	r24, 0x98	; 152
 1f0:	80 93 c1 00 	sts	0x00C1, r24
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	80 93 c2 00 	sts	0x00C2, r24
 1fa:	08 95       	ret

000001fc <_Z9uart_putch>:
 1fc:	20 91 49 02 	lds	r18, 0x0249
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	2f 71       	andi	r18, 0x1F	; 31
 204:	90 91 48 02 	lds	r25, 0x0248
 208:	29 17       	cp	r18, r25
 20a:	e1 f3       	breq	.-8      	; 0x204 <_Z9uart_putch+0x8>
 20c:	e2 2f       	mov	r30, r18
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e6 59       	subi	r30, 0x96	; 150
 212:	fd 4f       	sbci	r31, 0xFD	; 253
 214:	80 83       	st	Z, r24
 216:	20 93 49 02 	sts	0x0249, r18
 21a:	e1 ec       	ldi	r30, 0xC1	; 193
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 62       	ori	r24, 0x20	; 32
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 23e:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 242:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
 246:	88 71       	andi	r24, 0x18	; 24
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 248:	e0 91 02 02 	lds	r30, 0x0202
 24c:	ef 5f       	subi	r30, 0xFF	; 255
 24e:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 250:	90 91 01 02 	lds	r25, 0x0201
 254:	e9 17       	cp	r30, r25
 256:	39 f0       	breq	.+14     	; 0x266 <__vector_36+0x40>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 258:	e0 93 02 02 	sts	0x0202, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	eb 5f       	subi	r30, 0xFB	; 251
 260:	fd 4f       	sbci	r31, 0xFD	; 253
 262:	20 83       	st	Z, r18
 264:	01 c0       	rjmp	.+2      	; 0x268 <__vector_36+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 266:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 268:	90 91 00 02 	lds	r25, 0x0200
 26c:	89 2b       	or	r24, r25
 26e:	80 93 00 02 	sts	0x0200, r24
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0b be       	out	0x3b, r0	; 59
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	0b b6       	in	r0, 0x3b	; 59
 296:	0f 92       	push	r0
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 2a0:	90 91 04 02 	lds	r25, 0x0204
 2a4:	80 91 03 02 	lds	r24, 0x0203
 2a8:	98 17       	cp	r25, r24
 2aa:	69 f0       	breq	.+26     	; 0x2c6 <__vector_37+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 2ac:	e0 91 03 02 	lds	r30, 0x0203
 2b0:	ef 5f       	subi	r30, 0xFF	; 255
 2b2:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 2b4:	e0 93 03 02 	sts	0x0203, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	eb 5d       	subi	r30, 0xDB	; 219
 2bc:	fd 4f       	sbci	r31, 0xFD	; 253
 2be:	80 81       	ld	r24, Z
 2c0:	80 93 ce 00 	sts	0x00CE, r24
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__vector_37+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 2c6:	e9 ec       	ldi	r30, 0xC9	; 201
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7d       	andi	r24, 0xDF	; 223
 2ce:	80 83       	st	Z, r24
    }
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0b be       	out	0x3b, r0	; 59
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <_Z13stdio_putcharcP6__file>:

	while (1);	
}

int stdio_putchar(char c, FILE *stream) {
	uart_putc(c);
 2e6:	8a df       	rcall	.-236    	; 0x1fc <_Z9uart_putch>
	return 0;
}
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret

000002ee <main>:
	
};

int main(void)
{
	uart_init(UART_BAUD_SELECT(19200, F_CPU));
 2ee:	83 e3       	ldi	r24, 0x33	; 51
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	6b df       	rcall	.-298    	; 0x1ca <_Z9uart_initj>
	fdev_setup_stream (&uartout, stdio_putchar, NULL, _FDEV_SETUP_WRITE);
 2f4:	83 e7       	ldi	r24, 0x73	; 115
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	90 93 93 02 	sts	0x0293, r25
 2fc:	80 93 92 02 	sts	0x0292, r24
 300:	10 92 95 02 	sts	0x0295, r1
 304:	10 92 94 02 	sts	0x0294, r1
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	80 93 8d 02 	sts	0x028D, r24
 30e:	10 92 97 02 	sts	0x0297, r1
 312:	10 92 96 02 	sts	0x0296, r1
	stdout = &uartout;
 316:	8a e8       	ldi	r24, 0x8A	; 138
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	90 93 9b 02 	sts	0x029B, r25
 31e:	80 93 9a 02 	sts	0x029A, r24
	
	DDRB |= _BV(PORTB7);
 322:	27 9a       	sbi	0x04, 7	; 4
	
	TCCR1B |= _BV(CS10);
 324:	e1 e8       	ldi	r30, 0x81	; 129
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
 32e:	ef e6       	ldi	r30, 0x6F	; 111
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 83       	st	Z, r24
	
	sei();
 338:	78 94       	sei
 33a:	ff cf       	rjmp	.-2      	; 0x33a <main+0x4c>

0000033c <__vector_20>:
int stdio_putchar(char c, FILE *stream) {
	uart_putc(c);
	return 0;
}

ISR(TIMER1_OVF_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
	
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
