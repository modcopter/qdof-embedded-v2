
qdof-embedded-v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000004a6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  0080020c  0080020c  00000546  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000cc3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001103  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ef  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000072e  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000248  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053c  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000907  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  00003c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	f2 c0       	rjmp	.+484    	; 0x276 <__vector_36>
  92:	00 00       	nop
  94:	22 c1       	rjmp	.+580    	; 0x2da <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ea       	ldi	r30, 0xA6	; 166
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 3a       	cpi	r26, 0xAC	; 172
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	59 d1       	rcall	.+690    	; 0x3d2 <main>
 120:	c0 c1       	rjmp	.+896    	; 0x4a2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
 13c:	80 91 c0 00 	lds	r24, 0x00C0
 140:	20 91 c6 00 	lds	r18, 0x00C6
 144:	88 71       	andi	r24, 0x18	; 24
 146:	e0 91 53 02 	lds	r30, 0x0253
 14a:	ef 5f       	subi	r30, 0xFF	; 255
 14c:	ef 71       	andi	r30, 0x1F	; 31
 14e:	90 91 52 02 	lds	r25, 0x0252
 152:	e9 17       	cp	r30, r25
 154:	39 f0       	breq	.+14     	; 0x164 <__vector_25+0x40>
 156:	e0 93 53 02 	sts	0x0253, r30
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ea 5a       	subi	r30, 0xAA	; 170
 15e:	fd 4f       	sbci	r31, 0xFD	; 253
 160:	20 83       	st	Z, r18
 162:	01 c0       	rjmp	.+2      	; 0x166 <__vector_25+0x42>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 91 51 02 	lds	r25, 0x0251
 16a:	89 2b       	or	r24, r25
 16c:	80 93 51 02 	sts	0x0251, r24
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_26>:
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
 19e:	90 91 55 02 	lds	r25, 0x0255
 1a2:	80 91 54 02 	lds	r24, 0x0254
 1a6:	98 17       	cp	r25, r24
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <__vector_26+0x3c>
 1aa:	e0 91 54 02 	lds	r30, 0x0254
 1ae:	ef 5f       	subi	r30, 0xFF	; 255
 1b0:	ef 71       	andi	r30, 0x1F	; 31
 1b2:	e0 93 54 02 	sts	0x0254, r30
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ea 58       	subi	r30, 0x8A	; 138
 1ba:	fd 4f       	sbci	r31, 0xFD	; 253
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 c6 00 	sts	0x00C6, r24
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <__vector_26+0x46>
 1c4:	e1 ec       	ldi	r30, 0xC1	; 193
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 7d       	andi	r24, 0xDF	; 223
 1cc:	80 83       	st	Z, r24
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0b be       	out	0x3b, r0	; 59
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <_Z9uart_initj>:
 1e4:	10 92 55 02 	sts	0x0255, r1
 1e8:	10 92 54 02 	sts	0x0254, r1
 1ec:	10 92 53 02 	sts	0x0253, r1
 1f0:	10 92 52 02 	sts	0x0252, r1
 1f4:	99 23       	and	r25, r25
 1f6:	24 f4       	brge	.+8      	; 0x200 <_Z9uart_initj+0x1c>
 1f8:	22 e0       	ldi	r18, 0x02	; 2
 1fa:	20 93 c0 00 	sts	0x00C0, r18
 1fe:	9f 77       	andi	r25, 0x7F	; 127
 200:	90 93 c5 00 	sts	0x00C5, r25
 204:	80 93 c4 00 	sts	0x00C4, r24
 208:	88 e9       	ldi	r24, 0x98	; 152
 20a:	80 93 c1 00 	sts	0x00C1, r24
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	80 93 c2 00 	sts	0x00C2, r24
 214:	08 95       	ret

00000216 <_Z9uart_getcv>:
 216:	90 91 53 02 	lds	r25, 0x0253
 21a:	80 91 52 02 	lds	r24, 0x0252
 21e:	98 17       	cp	r25, r24
 220:	81 f0       	breq	.+32     	; 0x242 <_Z9uart_getcv+0x2c>
 222:	e0 91 52 02 	lds	r30, 0x0252
 226:	ef 5f       	subi	r30, 0xFF	; 255
 228:	ef 71       	andi	r30, 0x1F	; 31
 22a:	e0 93 52 02 	sts	0x0252, r30
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ea 5a       	subi	r30, 0xAA	; 170
 232:	fd 4f       	sbci	r31, 0xFD	; 253
 234:	20 81       	ld	r18, Z
 236:	80 91 51 02 	lds	r24, 0x0251
 23a:	10 92 51 02 	sts	0x0251, r1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <_Z9uart_getcv+0x30>
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	31 e0       	ldi	r19, 0x01	; 1
 246:	82 2f       	mov	r24, r18
 248:	93 2f       	mov	r25, r19
 24a:	08 95       	ret

0000024c <_Z9uart_putch>:
 24c:	20 91 55 02 	lds	r18, 0x0255
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	2f 71       	andi	r18, 0x1F	; 31
 254:	90 91 54 02 	lds	r25, 0x0254
 258:	29 17       	cp	r18, r25
 25a:	e1 f3       	breq	.-8      	; 0x254 <_Z9uart_putch+0x8>
 25c:	e2 2f       	mov	r30, r18
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	ea 58       	subi	r30, 0x8A	; 138
 262:	fd 4f       	sbci	r31, 0xFD	; 253
 264:	80 83       	st	Z, r24
 266:	20 93 55 02 	sts	0x0255, r18
 26a:	e1 ec       	ldi	r30, 0xC1	; 193
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 62       	ori	r24, 0x20	; 32
 272:	80 83       	st	Z, r24
 274:	08 95       	ret

00000276 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	0b b6       	in	r0, 0x3b	; 59
 282:	0f 92       	push	r0
 284:	2f 93       	push	r18
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 28e:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 292:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
 296:	88 71       	andi	r24, 0x18	; 24
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 298:	e0 91 0e 02 	lds	r30, 0x020E
 29c:	ef 5f       	subi	r30, 0xFF	; 255
 29e:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 2a0:	90 91 0d 02 	lds	r25, 0x020D
 2a4:	e9 17       	cp	r30, r25
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <__vector_36+0x40>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 2a8:	e0 93 0e 02 	sts	0x020E, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ef 5e       	subi	r30, 0xEF	; 239
 2b0:	fd 4f       	sbci	r31, 0xFD	; 253
 2b2:	20 83       	st	Z, r18
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <__vector_36+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 2b8:	90 91 0c 02 	lds	r25, 0x020C
 2bc:	89 2b       	or	r24, r25
 2be:	80 93 0c 02 	sts	0x020C, r24
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 2f0:	90 91 10 02 	lds	r25, 0x0210
 2f4:	80 91 0f 02 	lds	r24, 0x020F
 2f8:	98 17       	cp	r25, r24
 2fa:	69 f0       	breq	.+26     	; 0x316 <__vector_37+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 2fc:	e0 91 0f 02 	lds	r30, 0x020F
 300:	ef 5f       	subi	r30, 0xFF	; 255
 302:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 304:	e0 93 0f 02 	sts	0x020F, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ef 5c       	subi	r30, 0xCF	; 207
 30c:	fd 4f       	sbci	r31, 0xFD	; 253
 30e:	80 81       	ld	r24, Z
 310:	80 93 ce 00 	sts	0x00CE, r24
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_37+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 316:	e9 ec       	ldi	r30, 0xC9	; 201
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	80 83       	st	Z, r24
    }
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	0b be       	out	0x3b, r0	; 59
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <_ZN9NotModuleIcE6updateEPv>:
	public:
	DataInput inp;
	DataOutput<T> out;
	NotModule() : inp(this) {}
	
	void update(void *data) {
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	1f 92       	push	r1
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	6c 01       	movw	r12, r24
		T temp = *(T *)(data);
		out = compl temp;
 34e:	db 01       	movw	r26, r22
 350:	8c 91       	ld	r24, X
 352:	80 95       	com	r24
 354:	89 83       	std	Y+1, r24	; 0x01
	DataOutput()
		: _connectedInputs(0)
	{}
	
	void sendData(T data) {
		for (int i = 0; i < _connectedInputs; i++) {
 356:	f6 01       	movw	r30, r12
 358:	82 85       	ldd	r24, Z+10	; 0x0a
 35a:	93 85       	ldd	r25, Z+11	; 0x0b
 35c:	18 16       	cp	r1, r24
 35e:	19 06       	cpc	r1, r25
 360:	f4 f4       	brge	.+60     	; 0x39e <_ZN9NotModuleIcE6updateEPv+0x68>
	public:
	DataInput inp;
	DataOutput<T> out;
	NotModule() : inp(this) {}
	
	void update(void *data) {
 362:	76 01       	movw	r14, r12
 364:	f6 e0       	ldi	r31, 0x06	; 6
 366:	ef 0e       	add	r14, r31
 368:	f1 1c       	adc	r15, r1
 36a:	00 e0       	ldi	r16, 0x00	; 0
 36c:	10 e0       	ldi	r17, 0x00	; 0
			_inputs[i]->update(&data);
 36e:	d7 01       	movw	r26, r14
 370:	ed 91       	ld	r30, X+
 372:	fd 91       	ld	r31, X+
 374:	7d 01       	movw	r14, r26
	DataInput(DataModule *parent) {
		_parent = parent;
	}
	
	void update(void *data) {
		_parent->update(data);
 376:	80 81       	ld	r24, Z
 378:	91 81       	ldd	r25, Z+1	; 0x01
 37a:	dc 01       	movw	r26, r24
 37c:	ed 91       	ld	r30, X+
 37e:	fc 91       	ld	r31, X
 380:	01 90       	ld	r0, Z+
 382:	f0 81       	ld	r31, Z
 384:	e0 2d       	mov	r30, r0
 386:	be 01       	movw	r22, r28
 388:	6f 5f       	subi	r22, 0xFF	; 255
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	19 95       	eicall
	DataOutput()
		: _connectedInputs(0)
	{}
	
	void sendData(T data) {
		for (int i = 0; i < _connectedInputs; i++) {
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
 392:	f6 01       	movw	r30, r12
 394:	82 85       	ldd	r24, Z+10	; 0x0a
 396:	93 85       	ldd	r25, Z+11	; 0x0b
 398:	08 17       	cp	r16, r24
 39a:	19 07       	cpc	r17, r25
 39c:	44 f3       	brlt	.-48     	; 0x36e <_ZN9NotModuleIcE6updateEPv+0x38>
		T temp = *(T *)(data);
		out = compl temp;
	}
 39e:	0f 90       	pop	r0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	08 95       	ret

000003b2 <_Z13stdio_putcharcP6__file>:
		}
	}
}

int stdio_putchar(char c, FILE *stream) {
	uart_putc(c);
 3b2:	4c df       	rcall	.-360    	; 0x24c <_Z9uart_putch>
	return 0;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	08 95       	ret

000003ba <_ZN9LedModule6updateEPv>:
class LedModule : public DataModule {
	public:
	DataInput inp;
	LedModule() : inp(this) {}
	
	void update(void *data) {
 3ba:	cf 93       	push	r28
		char state = *(char *)(data);
 3bc:	fb 01       	movw	r30, r22
 3be:	c0 81       	ld	r28, Z
		uart_putc(state);
 3c0:	8c 2f       	mov	r24, r28
 3c2:	44 df       	rcall	.-376    	; 0x24c <_Z9uart_putch>
		//
		if (state)
 3c4:	cc 23       	and	r28, r28
 3c6:	11 f0       	breq	.+4      	; 0x3cc <_ZN9LedModule6updateEPv+0x12>
		PORTB |= _BV(PORTB7);
 3c8:	2f 9a       	sbi	0x05, 7	; 5
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <_ZN9LedModule6updateEPv+0x14>
		else
		PORTB &= ~_BV(PORTB7);
 3cc:	2f 98       	cbi	0x05, 7	; 5
	}
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <main>:
		out = compl temp;
	}
};

int main(void)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	69 97       	sbiw	r28, 0x19	; 25
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
	uart_init(UART_BAUD_SELECT(19200, F_CPU));
 3e6:	83 e3       	ldi	r24, 0x33	; 51
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc de       	rcall	.-520    	; 0x1e4 <_Z9uart_initj>
	fdev_setup_stream (&uartout, stdio_putchar, NULL, _FDEV_SETUP_WRITE);
 3ec:	89 ed       	ldi	r24, 0xD9	; 217
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	90 93 9f 02 	sts	0x029F, r25
 3f4:	80 93 9e 02 	sts	0x029E, r24
 3f8:	10 92 a1 02 	sts	0x02A1, r1
 3fc:	10 92 a0 02 	sts	0x02A0, r1
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	80 93 99 02 	sts	0x0299, r24
 406:	10 92 a3 02 	sts	0x02A3, r1
 40a:	10 92 a2 02 	sts	0x02A2, r1
	stdout = &uartout;
 40e:	86 e9       	ldi	r24, 0x96	; 150
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	90 93 a9 02 	sts	0x02A9, r25
 416:	80 93 a8 02 	sts	0x02A8, r24
	sei();
 41a:	78 94       	sei
	
	DDRB |= _BV(PORTB7);
 41c:	27 9a       	sbi	0x04, 7	; 4

class DataModule {
public:
	DataModule() {
		static int _lastId = 0;
		this->id = _lastId++;
 41e:	80 91 a4 02 	lds	r24, 0x02A4
 422:	90 91 a5 02 	lds	r25, 0x02A5
 426:	9c 83       	std	Y+4, r25	; 0x04
 428:	8b 83       	std	Y+3, r24	; 0x03
template <class T>
class NotModule : public DataModule {
	public:
	DataInput inp;
	DataOutput<T> out;
	NotModule() : inp(this) {}
 42a:	24 e0       	ldi	r18, 0x04	; 4
 42c:	32 e0       	ldi	r19, 0x02	; 2
 42e:	3a 83       	std	Y+2, r19	; 0x02
 430:	29 83       	std	Y+1, r18	; 0x01
#include "data/DataModule.h"

class DataInput {
public:
	DataInput(DataModule *parent) {
		_parent = parent;
 432:	9e 01       	movw	r18, r28
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	3e 83       	std	Y+6, r19	; 0x06
 43a:	2d 83       	std	Y+5, r18	; 0x05
 43c:	9c 01       	movw	r18, r24
 43e:	2f 5f       	subi	r18, 0xFF	; 255
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	3e 8b       	std	Y+22, r19	; 0x16
 444:	2d 8b       	std	Y+21, r18	; 0x15
 446:	02 96       	adiw	r24, 0x02	; 2
 448:	90 93 a5 02 	sts	0x02A5, r25
 44c:	80 93 a4 02 	sts	0x02A4, r24
static FILE uartout = {0};

class LedModule : public DataModule {
	public:
	DataInput inp;
	LedModule() : inp(this) {}
 450:	8a e0       	ldi	r24, 0x0A	; 10
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	9c 8b       	std	Y+20, r25	; 0x14
 456:	8b 8b       	std	Y+19, r24	; 0x13
 458:	ce 01       	movw	r24, r28
 45a:	43 96       	adiw	r24, 0x13	; 19
 45c:	98 8f       	std	Y+24, r25	; 0x18
 45e:	8f 8b       	std	Y+23, r24	; 0x17
	
	bool connect(DataInput *input) {
		if (_connectedInputs >= MAX_CONNECTIONS)
			return false;
		//
		_inputs[_connectedInputs++] = input;
 460:	ce 01       	movw	r24, r28
 462:	05 96       	adiw	r24, 0x05	; 5
 464:	9e 87       	std	Y+14, r25	; 0x0e
 466:	8d 87       	std	Y+13, r24	; 0x0d
 468:	ce 01       	movw	r24, r28
 46a:	47 96       	adiw	r24, 0x17	; 23
 46c:	98 87       	std	Y+8, r25	; 0x08
 46e:	8f 83       	std	Y+7, r24	; 0x07
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	9c 87       	std	Y+12, r25	; 0x0c
 476:	8b 87       	std	Y+11, r24	; 0x0b
	
	out > mod.inp;
	mod.out > led.inp;
	
	while(1) {
		uint16_t c = uart_getc();
 478:	ce de       	rcall	.-612    	; 0x216 <_Z9uart_getcv>
		if ((c & 0xFF00) == 0) {
 47a:	9c 01       	movw	r18, r24
 47c:	22 27       	eor	r18, r18
 47e:	23 2b       	or	r18, r19
 480:	d9 f7       	brne	.-10     	; 0x478 <main+0xa6>
			out = c;
 482:	89 8f       	std	Y+25, r24	; 0x19
	}
	
	void update(void *data) {
		_parent->update(data);
 484:	ed 85       	ldd	r30, Y+13	; 0x0d
 486:	fe 85       	ldd	r31, Y+14	; 0x0e
 488:	80 81       	ld	r24, Z
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	dc 01       	movw	r26, r24
 48e:	ed 91       	ld	r30, X+
 490:	fc 91       	ld	r31, X
 492:	01 90       	ld	r0, Z+
 494:	f0 81       	ld	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	be 01       	movw	r22, r28
 49a:	67 5e       	subi	r22, 0xE7	; 231
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	19 95       	eicall
 4a0:	eb cf       	rjmp	.-42     	; 0x478 <main+0xa6>

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
